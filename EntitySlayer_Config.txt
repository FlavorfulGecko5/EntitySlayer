/* READ ME!

This is EntitySlayer's config file. Use EntitySlayer to open and edit this file!

Right now, it's sole purpose is customizing the append menu - letting you craft and organize your own templates to suit your needs.

I recommend keeping Automatic idList Renumbering turned off for this file. Enabling it may cause unwanted edits to templates.

Once satisfied, save your changes and the append menu will automatically refresh.

=======
Enums

Use the enums object to define custom argument types for the append menu.

Each value may have an alias, which is displayed to the user instead of the literal value. Both the value and alias may be quoted.

=======
Append

Use the append object to build a custom append menu.

Each menu entry may have the following fields:

1. text - This object's contents are inserted into the node tree when you execute Append. If this node is missing, a submenu is constructed instead of a menu button.

2. hotkey - Sets the keyboard shortcut for this item. If hotkeys conflict, unintended functions may execute.
   > Examples: "1" , "Ctrl+5" , "Shift+T" , "Ctrl+Shift+F", "Alt+K", etc.
   > If hotkeys conflict, unintended functions may execute. Please ensure your template hotkeys don't conflict with each other, or with other features of EntitySlayer!

3. args - Specifies a list of parameters and their default values. 
   > When appending an item with args defined, you will be prompted to enter them.
   > To insert parameters into your text, use %[index]% (i.e. int = %0%)
   > Be efficient - use Tab to quickly navigate between different fields, and spacebar to select them!

This file comes pre-supplied with many helpful templates. Studying this file's contents will teach you how to create your own templates. See the next section for more information on append arguments.

=====
Arguments In-Depth

There are several types of arguments. This section shows examples for defining all of them:

---
1. Textboxes

The default argument type. You may give a default value for this argument type

args {
   Name = "Default Value"
   "Second"
   "Third" = 5
}

---
2. Checkboxes

To use these, you must specify that the argument is of type "bool". Default values are true/false.

args {
   Boolean {
      type = "bool"
      default = true
   }
   "Another Boolean" {
      type = bool
      default = false
   }
}

---
3. Checklists

Used by Enum types to display a list of values, of which any number may be selected. Default values are not currently supported.

args {
   "Spawn These Monsters" {
      type = "spawntype"
   }
}
*/
enums {
	/* Omitted SpawnTypes:
	ENCOUNTER_SPAWN_INVALID
	ENCOUNTER_DO_NOT_USE_MAX_COMMON
	ENCOUNTER_DO_NOT_USE_MAX_HEAVY
	ENCOUNTER_DO_NOT_USE_MAX_SUPER
	ENCOUNTER_DO_NOT_USE_AMBIENT
	ENCOUNTER_SPAWN_GENERIC
	ENCOUNTER_SPAWN_UNUSED
	*/
	spawntype {
		ENCOUNTER_SPAWN_ANY = "Any"
		// === FODDER ===
		ENCOUNTER_SPAWN_ZOMBIE_TIER_1 = "Zombie"
		ENCOUNTER_SPAWN_ZOMBIE_T1_SCREECHER = "Screecher"
		ENCOUNTER_SPAWN_ZOMBIE_TIER_3 = "Mech. Zombie"
		ENCOUNTER_SPAWN_IMP = "Imp"
		ENCOUNTER_SPAWN_STONE_IMP = "Stone Imp"
		ENCOUNTER_SPAWN_GARGOYLE = "Gargoyle"
		ENCOUNTER_SPAWN_HELL_SOLDIER = "Blaster Soldier"
		ENCOUNTER_SPAWN_SHOTGUN_SOLDIER = "Shotgun Soldier"
		ENCOUNTER_SPAWN_CHAINGUN_SOLDIER = "Chaingun Soldier"
		ENCOUNTER_SPAWN_ZOMBIE_MAYKR = "Maykr Drone"
		ENCOUNTER_SPAWN_LOST_SOUL = "Lost Soul"
		// === HEAVIES ===
		ENCOUNTER_SPAWN_ARACHNOTRON = "Arachnotron"
		ENCOUNTER_SPAWN_BLOOD_ANGEL = "Blood Maykr"
		ENCOUNTER_SPAWN_CARCASS = "Carcass"
		ENCOUNTER_SPAWN_HELL_KNIGHT = "Hell Knight"
		ENCOUNTER_SPAWN_DREAD_KNIGHT = "Dread Knight"
		ENCOUNTER_SPAWN_PINKY = "Pinky"
		ENCOUNTER_SPAWN_SPECTRE = "Spectre"
		ENCOUNTER_SPAWN_CACODEMON = "Cacodemon"
		ENCOUNTER_SPAWN_PAIN_ELEMENTAL = "Pain Elemental"
		ENCOUNTER_SPAWN_MANCUBUS = "Mancubus"
		ENCOUNTER_SPAWN_CYBER_MANCUBUS = "Cyber Mancubus"
		ENCOUNTER_SPAWN_PROWLER = "Prowler"
		ENCOUNTER_SPAWN_CURSED_PROWLER = "Cursed Prowler"
		ENCOUNTER_SPAWN_REVENANT = "Revenant"
		ENCOUNTER_SPAWN_WHIPLASH = "Whiplash"
		// === SUPER HEAVIES ===
		ENCOUNTER_SPAWN_ARCHVILE = "Archvile"
		ENCOUNTER_SPAWN_DOOM_HUNTER = "Doom Hunter"
		ENCOUNTER_SPAWN_BARON = "Baron"
		ENCOUNTER_SPAWN_ARMORED_BARON = "Armored Baron"
		ENCOUNTER_SPAWN_MARAUDER = "Marauder"
		ENCOUNTER_SPAWN_TYRANT = "Tyrant"
		// === AMBIENT ===
		ENCOUNTER_SPAWN_CUEBALL = "Explosive Zombie"
		ENCOUNTER_SPAWN_BUFF_POD = "Buff Totem"
		ENCOUNTER_SPAWN_SUPER_TENTACLE = "Giant Tentacle"
		ENCOUNTER_SPAWN_TENTACLE = "Tentacle"
		ENCOUNTER_SPAWN_SPIRIT = "Spirit"
		ENCOUNTER_SPAWN_TURRET = "Turret"
		ENCOUNTER_SPAWN_DEMONIC_TROOPER = "Immoran Soldier"
		// === BOSSES ===
		ENCOUNTER_SPAWN_GLADIATOR = "Gladiator"
		ENCOUNTER_SPAWN_ICON_OF_SIN = "Icon of Sin"
		ENCOUNTER_SPAWN_MAYKR_ANGEL = "Khan Maykr"
		ENCOUNTER_SPAWN_SAMUEL_BOSS = "Samuel Maykr"
	}
	eventflag {
		ENCOUNTER_EVENT_FLAG_PRE_COMBAT
		ENCOUNTER_EVENT_FLAG_COMMIT
		ENCOUNTER_EVENT_FLAG_EXIT
		ENCOUNTER_EVENT_FLAG_AI_AWARE_OF_PLAYER
		ENCOUNTER_EVENT_FLAG_USER_EVENT
		ENCOUNTER_EVENT_FLAG_COUNT
	}
	grouprole {
		ROLE_NONE
		ROLE_DEFEND
		ROLE_ASSAULT
		ROLE_FLANK
		ROLE_FLANK_CHARGE
		ROLE_FORMATION
		ROLE_THROW
		ROLE_CHARGE
		ROLE_TURRET
		ROLE_DEFEND_ZONE
		ROLE_UNAVAILABLE
		ROLE_MAX
	}
	socialemotion {
		EMOTION_MIN
		EMOTION_TERRIFIED
		EMOTION_FEAR
		EMOTION_WARY
		EMOTION_DESTROY_AT_ALL_COSTS
		EMOTION_DESTROY_PRIORITY
		EMOTION_DESTROY
		EMOTION_HATE
		EMOTION_ANGER
		EMOTION_DISLIKE
		EMOTION_ANNOYED
		EMOTION_NEUTRAL
		EMOTION_FRIENDLY
		EMOTION_SQUADMATE
		EMOTION_PARTNER
		EMOTION_MAX
	}
	logicoperator {
		ENCOUNTER_LOGICAL_OP_AND
		ENCOUNTER_LOGICAL_OP_OR
		ENCOUNTER_LOGICAL_OP_MAX
	}
}
append {
	eventCalls {
		activateTarget {
			hotkey ""
			args {
				"Target"
				"Design Comment"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "activateTarget";
						args = {
							num = 2;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								string = "%1%";
							}
						}
					}
				}
			}
		}
		clearCombatRoles {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype"
				}
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "clearCombatRoles";
						args = {
							num = 2;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
						}
					}
				}
			}
		}
		clearFactionOverrides {
			hotkey ""
			args {
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "clearFactionOverrides";
						args = {
							num = 0;
						}
					}
				}
			}
		}
		damageAI {
			hotkey ""
			args {
				"Damage Decl"
				"AI Type" {
					type = "spawntype";
				}
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "damageAI";
						args = {
							num = 3;
							item[0] = {
								decl = {
									damage = "%0%";
								}
							}
							item[1] = {
								eEncounterSpawnType_t = %1%;
							}
							item[2] = {
								string = "%2%";
							}
						}
					}
				}
			}
		}
		designerComment {
			hotkey ""
			args {
				"Comment"
				"Print To Console" {
					type = "bool"
					default = true
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "designerComment";
						args = {
							num = 2;
							item[0] = {
								string = "%0%";
							}
							item[1] = {
								bool = %1%;
							}
						}
					}
				}
			}
		}
		forceAIToFlee {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Group Label"
				"Radius"
				"Immediately Despawn" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "forceAIToFlee";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
							item[2] = {
								float = %2%;
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		forceChargeOnAllAI {
			hotkey ""
			args {
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "forceChargeOnAllAI";
						args = {
							num = 0;
						}
					}
				}
			}
		}
		maintainAICount {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Desired Count"
				"Maximum Spawn Count" = -1
				"Minimum Spawn Delay"
				"Minimum AI for Respawn"
				"Spawn Group"
				"Group Label"
				"Maximum Spawn Delay"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "maintainAICount";
						args = {
							num = 8;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								int = %2%;
							}
							item[3] = {
								float = %3%;
							}
							item[4] = {
								int = %4%;
							}
							item[5] = {
								entity = "%5%";
							}
							item[6] = {
								string = "%6%";
							}
							item[7] = {
								float = %7%;
							}
						}
					}
				}
			}
		}
		makeAIAwareOfPlayer {
			hotkey ""
			args {
				"All Active" {
					type = "bool"
				}
				"On Spawn" {
					type = "bool"
				}
				"Group Label"
				"Restore Perception" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "makeAIAwareOfPlayer";
						args = {
							num = 4;
							item[0] = {
								bool = %0%;
							}
							item[1] = {
								bool = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		migrateAIFromExternalScript {
			hotkey ""
			args {
				"Encounter Script"
				"AI Type" {
					type = "spawntype";
				}
				"Group Label"
				"Shared Between Scripts" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "migrateAIFromExternalScript";
						args = {
							num = 4;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								eEncounterSpawnType_t = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		proceedToNextScript {
			hotkey ""
			args {
				"Bypass Next Wait For Commit" {
					type = "bool"
				}
				"Carry Over Existing User Flags" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "proceedToNextScript";
						args = {
							num = 2;
							item[0] = {
								bool = %0%;
							}
							item[1] = {
								bool = %1%;
							}
						}
					}
				}
			}
		}
		raiseEventFlagOnExternalScript {
			hotkey ""
			args {
				"Encounter Script"
				"Event Flag" {
					type = "eventflag"
				}
				"User Flag"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "raiseEventFlagOnExternalScript";
						args = {
							num = 3;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								eEncounterEventFlags_t = %1%;
							}
							item[2] = {
								string = "%2%";
							}
						}
					}
				}
			}
		}
		removeAI {
			hotkey ""
			args {
				"AI Type" {
					type = "spawntype";
				}
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "removeAI";
						args = {
							num = 2;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
						}
					}
				}
			}
		}
		setCombatRoles {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Group Label"
				"Group Role" {
					type = "grouprole"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "setCombatRoles";
						args = {
							num = 3;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
							item[2] = {
								encounterGroupRole_t = %2%;
							}
						}
					}
				}
			}
		}
		setFactionRelation {
			hotkey ""
			args {
				"Instigator Spawn Type" {
					type = "spawntype";
				}
				"Group Label"
				"Target Spawn Type" {
					type = "spawntype";
				}
				"Relation" {
					type = "socialemotion"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "setFactionRelation";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
							item[2] = {
								eEncounterSpawnType_t = %2%;
							}
							item[3] = {
								socialEmotion_t = %3%;
							}
						}
					}
				}
			}
		}
		setMusicState {
			hotkey ""
			args {
				"Target"
				"State Decl"
				"Design Comment"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "setMusicState";
						args = {
							num = 3;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								decl = {
									soundstate = "%1%";
								}
							}
							item[2] = {
								string = "%2%";
							}
						}
					}
				}
			}
		}
		setNextScriptIndex {
			hotkey ""
			args {
				"Next Script Index"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "setNextScriptIndex";
						args = {
							num = 1;
							item[0] = {
								int = %0%;
							}
						}
					}
				}
			}
		}
		setNextScriptIndexRandom {
			hotkey ""
			args {
				"Minimum Script Index"
				"Maximum Script Index"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "setNextScriptIndexRandom";
						args = {
							num = 2;
							item[0] = {
								int = %0%;
							}
							item[1] = {
								int = %1%;
							}
						}
					}
				}
			}
		}
		spawnAI {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Spawn Count"
				"Spawn Group"
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "spawnAI";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								entity = "%2%";
							}
							item[3] = {
								string = "%3%";
							}
						}
					}
				}
			}
		}
		spawnArchvile {
			hotkey ""
			args {
				"Spawn Target"
				"Archvile Template"
				"Archvile Label"
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "spawnArchvile";
						args = {
							num = 4;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								entity = "%1%";
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								string = "%3%";
							}
						}
					}
				}
			}
		}
		spawnBuffPod {
			hotkey ""
			args {
				"Spawn Target"
				"Buffpod Label"
				"Buffed AI Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "spawnBuffPod";
						args = {
							num = 3;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								string = "%1%";
							}
							item[2] = {
								string = "%2%";
							}
						}
					}
				}
			}
		}
		spawnPossessedAI {
			hotkey ""
			args {
				"AI Spawn Type" {
					type = "spawntype";
				}
				"AI Spawn Target"
				"AI Group Label"
				"Spirit Spawn Target"
				"Spirit Allowed AI Types" {
					type = "spawntype";
				}
				"Spirit Allowed Group Label"
				"AI Type Explicit Filtering" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "spawnPossessedAI";
						args = {
							num = 7;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								entity = "%1%";
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								entity = "%3%";
							}
							item[4] = {
								eEncounterSpawnType_t = %4%;
							}
							item[5] = {
								string = "%5%";
							}
							item[6] = {
								bool = %6%;
							}
						}
					}
				}
			}
		}
		spawnSingleAI {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Spawn Target"
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "spawnSingleAI";
						args = {
							num = 3;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								entity = "%1%";
							}
							item[2] = {
								string = "%2%";
							}
						}
					}
				}
			}
		}
		spawnSpirit {
			hotkey ""
			args {
				"Spawn Target"
				"Allowed AI Types" {
					type = "spawntype";
				}
				"Allowed Group Label"
				"AI Type Explicit Filtering" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "spawnSpirit";
						args = {
							num = 4;
							item[0] = {
								entity = "%0%";
							}
							item[1] = {
								eEncounterSpawnType_t = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		staggeredAISpawn {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Spawn Count"
				"Spawn Group"
				"Group Label"
				"Minimum Spawn Stagger"
				"Maximum Spawn Stagger"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "staggeredAISpawn";
						args = {
							num = 6;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								entity = "%2%";
							}
							item[3] = {
								string = "%3%";
							}
							item[4] = {
								float = %4%;
							}
							item[5] = {
								float = %5%;
							}
						}
					}
				}
			}
		}
		stopMaintainingAICount {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Group Label"
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "stopMaintainingAICount";
						args = {
							num = 2;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
						}
					}
				}
			}
		}
		wait {
			hotkey ""
			args {
				"Seconds"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "wait";
						args = {
							num = 2;
							item[0] = {
								float = %0%;
							}
							item[1] = {
								bool = %1%;
							}
						}
					}
				}
			}
		}
		waitAIHealthLevel {
			hotkey ""
			args {
				"Spawn Type" {
					type = "spawntype";
				}
				"Target Group Health"
				"Group Label"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitAIHealthLevel";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								float = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		waitAIRemaining {
			hotkey ""
			args {
				"AI Type" {
					type = "spawntype";
				}
				"Desired Remaining AI Count"
				"Group Label"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitAIRemaining";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		waitForEventFlag {
			hotkey ""
			args {
				"Event Flag" {
					type = "eventflag"
				}
				"User Flag"
				"Test If Already Raised" {
					type = "bool"
				}
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitForEventFlag";
						args = {
							num = 4;
							item[0] = {
								eEncounterEventFlags_t = %0%;
							}
							item[1] = {
								string = "%1%";
							}
							item[2] = {
								bool = %2%;
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		waitKillCount {
			hotkey ""
			args {
				"AI Type" {
					type = "spawntype"
				}
				"Desired Kill Count"
				"Group Label"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitKillCount";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		waitMaintainComplete {
			hotkey ""
			args {
				"AI Type" {
					type = "spawntype";
				}
				"Remaining Spawn Count"
				"Group Label"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitMaintainComplete";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
		waitMultipleConditions {
			// Note: The typo in the eventDef string is intentional
			// This spelling mistake is present in the game
			hotkey ""
			args {
				"Condition Count"
				"Logic Operator" {
					type = "logicoperator"
				}
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitMulitpleConditions";
						args = {
							num = 3;
							item[0] = {
								int = %0%;
							}
							item[1] = {
								encounterLogicOperator_t = %1%;
							}
							item[2] = {
								bool = %2%;
							}
						}
					}
				}
			}
		}
		waitRandomKillCount {
			hotkey ""
			args {
				"AI Type" {
					type = "spawntype"
				}
				"Minimum Kill Count"
				"Maximum Kill Count"
				"Group Label"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitRandomKillCount";
						args = {
							num = 5;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								int = %2%;
							}
							item[3] = {
								string = "%3%";
							}
							item[4] = {
								bool = %4%;
							}
						}
					}
				}
			}
		}
		waitStaggeredSpawnComplete {
			hotkey ""
			args {
				"AI Type" {
					type = "spawntype";
				}
				"Remaining Spawn Count"
				"Group Label"
				"Disable AI Highlight" {
					type = "bool"
				}
			}
			text {
				item[0] = {
					eventCall = {
						eventDef = "waitStaggeredSpawnComplete";
						args = {
							num = 4;
							item[0] = {
								eEncounterSpawnType_t = %0%;
							}
							item[1] = {
								int = %1%;
							}
							item[2] = {
								string = "%2%";
							}
							item[3] = {
								bool = %3%;
							}
						}
					}
				}
			}
		}
	}
}
